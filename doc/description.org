#+OPTIONS: ^:{}

* Intro

  Du coup, on veut ici créer un programme qui réalise le rêve de
  la vie artificielle :
  héberger et simuler des cellules qui vont évoluer afin de recréer
  la vie /in silico/ (on peut toujours rêver).

** Résumé des épisodes précédents

   Il y a eu plusieurs essais dans ce sens : 
     - Tierra : 
        + Le monde est un tableau unidimensionnel. Chaque case est soit
          vide, soit contient une instruction, parmi un jeu 
          d'instruction bien choisi.
 
        + Les cellules sont un ensemble contigu de cases, et donc des
	  instructions qu'elles contiennent.

       Le jeu d'instruction permet aux cellules de lire n'importe où, 
       mais pas d'écrire à l'intérieur d'autres cellules. Les cellules 
       se dupliquent en recopiant leur code génétique vers une partie 
       vide de la bande.

        + Chaque cellule a son processeur propre, qui simule
          l'exécution de son code.

        + Comportements apparus : spécialisation, parasitage, un peu de 
          complexification

     - Des trucs d'Hutton : 
        + Le monde est un tableau bidimensionnel. Le monde contient
          des atomes, qui peuvent se déplacer plus ou moins librement.
        
        + Les atomes ont un type donné, et un état qui peut varier au 
          cours du temps. Un jeu de réactions chimique, qui détermine 
          si deux atomes de type et d'état donné qui se rencontrent 
          vont former une liaison. 
          Jeu de réactions chimiques bien choisi.

        + Les cellules ont une membrane qui forme un cercle, et un brin 
          d'ADN, relié à ses deux extrémités à la membrane. Les 
          cellules se dupliquent de manière spontanée grâce aux 
          réactions chimiques. 

        + Le monde est simulé /physiquement/, c'est à dire chaque atome 
          séparemment, et rien d'autre.

        + Comportements apparus : pas grand chose, à part une légère 
          réduction de l'ADN.

     En résumé, Tierra s'est montré prometteur, mais est beaucoup plus 
     proche d'un ordinateur que d'une cellule. On manque en particulier 
     de capacité de réaction, de communication, etc...

     Hutton est très proche en quelques sorte de la biologie, mais 
     ça ne marche pas très bien. Sans parler des coûts de simulation 
     faramineux, ni du jeu de réactions chimiques tellement alambiqué 
     pour que ça marche que c'en est un peu absurde. 


** Où l'on essaie de préparer un autre épisode

   Ce que j'aimerait faire, c'est un modèle qui soit à la fois proche
   du fonctionnement des ordinateurs (c'est à dire en particulier avec 
   une physique très simple, sans avoir besoin de simuler des choses à 
   un niveau très bas), et qui reflète le principe de fonctionnement 
   d'une cellule autant qu'il est souhaitable et possible.

   Une première idée à été de faire un peu comme Tierra, mais en plus 
   de dimensions. Une cellule est une matrice, où les fonctions sont
   des instructions qui pointent vers la suivante (contiguë). En trois
   dimensions, ça peut commencer à donner des trucs assez rigolos, 
   mais gérer la duplication semble devenir complexe. On perds aussi 
   la bonne relation qui existait entre les cellules et l'univers.
 
   La deuxième idée est d'utiliser des modèles complutationnels simples 
   pour simuler les protéines. Partant des automates, j'en suis arrivé 
   aux réseaux de Petri, qui me semblent assez prometteurs. 
   On le décrira plus précisement par la suite.
   
** Trucs importants à garder en tête

   Les membranes, c'est la vie en plus tranquille.
   La communication, c'est la vie en plus rigolo.
   La vie tout court, c'est déjà pas mal.
   Les ribosomes, c'est trop l'éclate.
   Toute action engendre une réaction.

* Description de ce que j'essaie de faire

** But

   Le but est d'avoir un modèle unifié de molécules, qui permettent à 
   la fois d'avoir des molécules qui :
     - représentent de l'information (ADN)
     - puissent agir sur d'autres molécules (protéines, enzymes), et 
       plus précisement 
        + Découper une molécule
        + Insérer une molécule dans une autre
        + Lire de l'information écrite sur une molécule
     - puissent échanger de l'information (métabolites)
   
   Enfin en vrai le but c'est de faire des *RIBOSOMES*, 
   ne l'oublions pas.

   Et aussi des membranes, élément essentiel de toute bactérie qui se respecte.
   
** Implémentation actuelle
   
*** Atomes et Molécules
    
    Les éléments de bases sont des atomes (ensemble fini).
    Pour l'instant, les atomes sont au nombres de 6 : A,B,C,D,E,F
    Les atomes se combinent linéairement pour former des molécules.

    Autrement dit, une molécule est une chaine contenant les caractères A-F.

*** Acides et Protéines

    Une molécule est parsée linéairement, pour produire une liste d'acides,
    c'est à dire une protéine.

    Il y a quatre types d'acides :
     + Place :
       correspond à une place d'un réseau de pétri

     + Input_arc :
       correspond à un arc entrant d'une transition.
       Il y a trois types d'Input_arc :
       - Regular_iarc (tid) :
	 pas d'effet particulier
       - Split_iarc (tid) :
	 sépare en deux les tokens qui passent par l'arc
         ( en découpant aussi la molécule éventuellement présente )
       - Filter_iarc (filter_pattern, tid) : 
	 Ne laisse passer que les token dont la position courante 
	 de la molécule contenue correspond au filter_pattern

     + Output_arc :
       correspond à un arc sortant d'une transition.
       Il y a trois types d'Output_arc :
       - Regular_oarc (tid) :
	 pas d'effet particulier
       - Move_oarc (tid, move)
	 déplace la molécule contenue dans le token suivant move
       - Bind_oarc (tid)
	 Fusionne deux tokens (et les molécules qu'ils contiennent)
       
     + Extension :
       Ajoute des fonctionnalités à une place
       - Bind_ext (binder) :
	 Ajoute un binder 
       - Grab_ext (graber) :
	 ajoute un graber
       - Init_with_token_ext :
	 la place est initialisée avec un token (vide)
       - Release_ext
	 les tokens qui arrivent depuis une transition sont relachés
	 à l'extérieur

    Les types d'acides correspondent à une courte chaîne de caractères
    (deux ou trois). Quand l'acide a besoin de plus d'information, 
    l'information est encodée par la chaîne qui suit l'acide, terminée 
    par un marqueur de fin (deux ou trois caractères, commun à tous 
    les acides).
     
*** Construction d'un réseau de pétri

   Pour construire le réseau de pétri associé à une protéine,
   la protéine est lue séquentiellement : 
   
   1. Tous les acides qui précèdent le premier acide Place
      sont ignorés
   2. À chaque acide Place rencontrée, une nouvelle Place du 
      réseau est construite.
      Tant qu'une autre Place n'est pas rencontrée, les acides
      qui suivent seront liés à la place.

      Pour simplifier les réactions, seul le premier Bind
      et le premier Grab seront pris en compte par une place.
      


***** TODO Un *PROBLÈME*:

       Que se passe-t-il si plusieurs transtions input avec la même id 
       partent d'un même nœud, en particulier 
       pour la gestion des token ?
       Plusieurs pistes :
        - la transition n'est pas crée
        - seul un des arcs est pris en compte
        - utiliser un des arcs au hasard
        - le programme bugge

*** Fonctionnement d'un réseau de pétri

   Le modéle est inspiré des modèles existants, avec 
   certaines spécificités. On a un graphe avec deux types
   de nœuds : 
    + Des Places :
      - Peuvent contenir au plus un Token.
      - Interagissent avec l'extérieur.
    + Des Transitions :
      - font passer les Tokens d'une place à l'autre,
	en appliquant des effets particuliers.

    Des arcs entrants vont des places aux transitions, 
    et des arcs sortants vont des transitions aux places.

    Les Tokens peuvent éventuellement contenir 
    une molécule, ainsi qu'un pointeur vers 
    un acide particulier (ou à la fin de la 
    molécule).

**** Fonctionnement des transitions :
    
   Une transition sera déclenchable si toutes les places avec des arcs
   entrants contiennent un token, et toutes les places d'arrivée 
   sont vides.
   
   Quand une transition est déclenchée :
   1. Les arcs entrants sont parcourus séquentiellement (dans l'ordre 
      dans lequel ils apparaissent dans la protéine). Une liste de tokens 
      est alors générée, qui correspond aux tokens des places de départ 
      après modification par les arcs entrants.
   2. La liste de token est parcourue, et les tokens répartis 
      dans les arcs sortants (un token par arc, sauf pour les bind).
   3. Si le nombre de Token est supérieur au nombre d'arcs sortants,
      les Tokens restants sont relachés à l'extérieur
      (avec éventuellement des effets supplémentaires à l'avenir).

   En particulier, l'ordre dans lequels les places apparaissent dans 
   la molécule a une influence sur le fonctionnement du réseau de pétri.

*** Réseaux de pétri étendus

Les réactions de type Bind lient deux réseaux de pétri entre eux.
Cette opération peut-être réalisée à volonté, pour former 
des graphes arbitraires de réseaux de pétri.

*** Réactions

   Une réaction est susceptible de se produire lorsque deux 
   molécules se rencontrent. Il y a pour l'instant deux types 
   de réactions implémentées :
   Grab et Bind
  
   Le renvoi d'une molécule à l'extérieur peut aussi être vu
   comme un type de réaction.
 
**** Grab
    
    Une place dotée d'une extension Grab sera capable d'attraper
    des molécules particulières, qui seront alors placées 
    à l'intérieur d'un Token.

    Un acide de type Grab contient un chaîne de caractères,
    qui est parsée pour générer une expression régulière 
    (restreinte).
    Les molécules qui sont matchées par l'expression régulière
    pourront être grabés (attrapées).
    
    Un grab ne peut se produire que si la place n'a pas de Token.

**** TODO Bind

    Une extension de type bind possède un bind_pattern 
    (une chaîne de caractère). 
    Deux Places avec Bind de réseaux de pétri différent pourront
    se binder (s'attacher) si les chaînes de caractères 
    sont le symétrique l'une de l'autre (reverse),
    et que les deux places n'ont pas de Token.

    Lorsqu'un Bind se produit, un token est créé dans les
    deux places impliquées.

    Dès que les deux places reçoivent à nouveau un token,
    les places se séparent (unbind).

    --> Mais donc  :
      - soit la phase de réactions se produit avant 
	la phase de déclenchment de transitions.
	Si les tokens sont toujours là après le déclenchement,
	on sépare
      - soit il faut faire plus attention, c'est compliqué
    
*** Réacteur et Simulation
    
    Le réacteur contient toutes les molécules, et gère les rencontres 
    et la simulation. 
    Le réacteur doit accomplir deux objectifs concurrents :
     - être « réaliste »
     - être efficace
   
**** TODO Molécules et réseaux de pétri
     
     Dans le réacteur se trouvent un certain nombre de molécules 
     différentes, chacune ayant une quantité propre.

     Afin d'être efficace, un unique réseau de pétri est créé
     par type de molécule (pour plus de réalisme, on pourrait 
     aller vers un nombre logarithmique).
     
     Deux choix :
      + calculer la quantité de réactions entre deux molécules
	en fonction de la quantité de chacune des molécules
      + creuser du coté de 
	Generalized Stochastic simulation algorithm for Artificial Chemistry,
	H. Soula
	
     

**** TODO Rencontres

     Tant qu'on n'étends pas les réseaux de pétri, c'est assez simple.
     Mais ensuite, il y a plusieurs choses à gérer:
      + Rencontre entre deux réseaux étendus :
	le problème, c'est qu'il peut y avoir beaucoup (BEAUCOUP) de bind
	possibles. 
	Pour régler ça, on pourrait faire en sorte de ne faire de réactions
	qu'entre deux réseaux de pétri; donc quand deux réseaux étendus
	se recontrent, on détermine le lieu (réseau de pétri pour chacun)
	de leur rencontre.
     
      + Rencontres à l'intérieur d'un réseau étendu.
	Il faut faire en sorte :
	- que deux pnets très proches puissent réagir
	- que deux pnets lointains puissent réagir
	- sinon, pas de réaction

     Ou alors, dans le contexte du papier de Soula, 
     donner les bons taux de réaction.

      
** Réflexions, choix et ouvertures

Cette partie sera un peu fouillis
     
*** Arguments pour le réseau de pétri

Les réseaux de pétri forment donc le modèle de calcul utilisé par
les bactéries pour fonctionner, interagir et se dupliquer.

Nous allons ici développer quelques arguments pour soutenir 
ce choix.
 
 + Le réseau de pétri est formé de manière non linéaire à partir d'une 
   liste d'acides. Cela devrait le rendre peu vulnérable à des 
   modifications mineurs de la liste d'acides formant la protéine.

   Reste cependant le fait que les protéines sont formées à partir 
   d'une liste d'atomes, qui est elle sensible à des variations locales.

 + Du fait de sa forme de graphe, le réseau de pétri peut être associé
   à une certaine spatialité. Par exemple, une protéine connectée à
   la membrane peut avoir une partie à l'intérieur, et une autre partie
   à l'extérieur de la membrane.

 + On peut sans trop de difficultés connecter des réseaux de pétri 
   entre eux (bind/catch), permettant d'étendre leur fonctionnalités,
   ainsi que de créer des *membranes*.

*** Forme des molécules

**** Molécule linéaire

      Le modèle le plus simple pour une molécule est simplement d'avoir
      une molécule linéaire (une liste).
      Des suites d'atomes sont alors interprétées directement comme 
      des acides, les atomes suivants pouvant donner de l'information 
      supplémentaire, etc.

      Mais le problème, 
      
**** Molécule sous forme de graphe
      
     Ce qui serait joli, ce serait d'avoir des connecteurs (à deux ou 
     trois branches), et des morceaux d'information, mais plus 
     compliqué à manipuler; il pourrait être intéressant de comparer 
     avec une structure linéaire pour les molécules.

*** Membrane

    La membrane est une partie essentielle d'une bactérie, puisqu'elle 
    la définit en établissant une barrière avec le monde extérieur.

    Pour l'implémentation d'une membrane, les fonctionnalités désirées 
    sont :
     + Permettre à la bactérie de réguler les entrées/sorties de 
     molécules
     + Établir une barrière /difficile/ à franchir pour les molécules
       extérieures non désirées.
     + Avoir un taille nécéssaire en fonction de la quantité de 
     molécules présentes, sous risque d'effets néfastes.
    
    Idée : Implémenter dans les cellules deux bornes qui doivent 
    être reliées par un certain nombre de protéines.
    (il faut que les protéines puissent se lier entre elles avec 
    des catch/bind)

**** Membranes avec des bind

     Une extension Bind d'une place permet à deux réseaux de pétri 
     de se lier. Le design de cette extension est fait de sorte 
     à pouvoir facilement implémenter des membranes

     Une Bind extension possède simplement une string, et se colle
     à une string symétrique :
      + reversed ? -> le plus simple
      + symétrie des atomes ? -> pourquoi, pourquoi pas ?

     Condition pour Binder : Les places sont vides
     Après le Bind, des token sont crées. -> cela permet d'effectuer
     une action après le  bind.

     Condition pour DéBinder : deux token reviennent, puis sont consommés.
     
     
     Deux réseaux de pétri bindés sont donc liés physiquement dans l'espace.

     Se présentent alors plusieurs choix :
      + un Bind FORT : les réseaux de pétri sont fusionnés à la Place
	de Bind, ce qui permet de créer de nouveaux réseaux plus 
	compliqués
	-> c'est assez compliqué à gérer, deux places sont fusionnées,
	il faut aussi pouvoir débinder, bref garder beaucoup en mémoire
	et avoir des structures de données compliquées
      + un Bind FAIBLE : les réseaux de Pétri sont indépendants
	-> c'est assez simple, et ça peut suffire pour les membranes

     Dans tous les cas, il faut créer un graphe sur-jacent qui va garder 
     en mémoire la structure de la molécule, pour pouvoir travailler sur 
     la structure (détecter les cycles, la distance entre deux pnet, etc).
       
*** Ribosome

    Un ribosome est une protéine qui lit un code génétique (ADN) et 
    construit des protéines en fonction de l'information contenue dans 
    l'ADN.

    Donc pour implémenter un ribosome, il faut être capable de lire de
    l'information contenue dans une molécule, de l'interpréter pour 
    recoller les bons acides au bon endroit sur une molécule en train
    d'être construite.

***** Implémentation possible d'un ribosome : 
    La molécule en train d'être construite se trouve à mol_start_place, 
    et le brin d'ADN lu se trouve à DNA_start_place.
    
    Les arcs entrants de transition qui partent de DNA_start_place sont 
    filtrants (fonctionnalité qui reste à implémenter), donc seule une 
    des filter_transition_i peut être lancéé (celle qui correspond à 
    l'information lue sur le brin d'ADN). 
    
    Lorsqu'une de ces transitions est lancée, la molécule se retrouve à 
    mol_temp_place_i, d'où elle va être lancée vers bind_transition_i, 
    qui lui accolera l'acide correspondant, et enfin rejoindre 
    mol_end_place (commun à tous les chemins).

    Il suffit ensuite de faire revenir la molécule et l'ADN à leur 
    place de départ (en ayant fait bouger la tête de lecture sur l'ADN) 
    pour recommencer l'opération avec le morceau d'information suivant.

    Voir le résultat du code suivant pour le graphe du réseau de pétri
    décrit, où les chemins que peut suivre la molécule sont en rouge, 
    les chemins que peut suivre le brin d'ADN est en bleu, et les acides
    en vert.
    
    #+BEGIN_SRC dot :file images/ribosome.png :cmdline -Kdot -Tpng
  digraph G {
          mol_start_place[color = "red"]
          DNA_start_place[color = "blue"]
          
          filter_transition_0[shape = "rectangle"]
          mol_temp_place_0[color = "red"]
          bind_transition_0[shape = "rectangle"]
          
          filter_transition_1[shape = "rectangle"]
          mol_temp_place_1[color = "red"]
          bind_transition_1[shape = "rectangle"]

          
          filter_transition_n[shape = "rectangle", style = "dotted"]
          mol_temp_place_n[color = "red", style = "dotted"]
          bind_transition_n[shape = "rectangle", style = "dotted"]
          
          DNA_end_place[color = "blue"]
          mol_end_place[color = "red"]
          
          acid_holder_0[color = "green"]
          acid_holder_1[color = "green"]
          acid_holder_n[color = "green"]
          
          mol_start_place -> filter_transition_0 ->
          mol_temp_place_0  -> bind_transition_0 ->
          mol_end_place [color =red];

          mol_start_place -> filter_transition_1 ->
          mol_temp_place_1  -> bind_transition_1 ->
          mol_end_place [color = "red"];

          mol_start_place -> filter_transition_n ->
          mol_temp_place_n  -> bind_transition_n ->
          mol_end_place [style = "dotted", color = "red"];

          DNA_start_place -> filter_transition_0 -> DNA_end_place
          [color = "blue"];
          DNA_start_place -> filter_transition_1 -> DNA_end_place
          [color = "blue"];
          DNA_start_place -> filter_transition_n ->
          DNA_end_place [style = "dotted", color = "blue"];

          acid_holder_0 -> bind_transition_0 [color = "green"];
          acid_holder_1 -> bind_transition_1 [color = "green"];
          acid_holder_n -> bind_transition_n [color = "green", style = "dotted"];
          
  }
#+END_SRC
 
   #+RESULTS:
   [[file:ribosome.png]]

   En détaillant un chemin en particulier, voici ce que cela donne : 
 

    #+BEGIN_SRC dot :file images/ribosome_detailed.png :cmdline -Kdot -Tpng
      digraph G {
              mol_start_place[color = "red"]
              DNA_start_place[color = "blue"]
              
              filter_transition[shape = "rectangle"]
              mol_temp_place[color = "red"]
              bind_transition[shape = "rectangle"]
              
              DNA_end_place[color = "blue"]
              mol_end_place[color = "red"]
              
              acid_holder[color = "green"]

              mol_start_place -> filter_transition ->
              mol_temp_place  -> bind_transition ->
              mol_end_place [color =red];

              DNA_start_place -> filter_transition -> DNA_end_place
              [color = "blue"];
              acid_holder -> bind_transition [color = "green"];
              
      }
#+END_SRC

    #+RESULTS:
    [[file:ribosome_detailed.png]]


A more compact universal ribosome, working in reverse.
#+BEGIN_SRC
[["Place"],
["InputArc","AA",["Regular"]],
["OutputArc","AA",["Bind"]],
["InputArc","AB",["Regular"]],
["OutputArc","AB",["Bind"]],
["InputArc","AC",["Regular"]],
["OutputArc","AC",["Bind"]],
["InputArc","AD",["Regular"]],
["OutputArc","AD",["Bind"]],
["InputArc","AF",["Regular"]],
["OutputArc","AF",["Bind"]],
["InputArc","AAA",["Regular"]],
["OutputArc","BBB",["Regular"]],
["Place"],
["InputArc","AA",["Regular"]],
["Extension",["Grab","FAF"]],
["Place"],
["InputArc","AB",["Regular"]],
["Extension",["Grab","FBF"]],
["Place"],
["InputArc","AC",["Regular"]],
["Extension",["Grab","FCF"]],
["Place"],
["InputArc","AD",["Regular"]],
["Extension",["Grab","FDF"]],
["Place"],
["InputArc","AF",["Regular"]],
["Extension",["Grab","FFF"]],
["Place"],
["InputArc","AA",["Filter","A"]],
["OutputArc","AA",["Move",true]],
["InputArc","AB",["Filter","B"]],
["OutputArc","AB",["Move",true]],
["InputArc","AC",["Filter","C"]],
["OutputArc","AC",["Move",true]],
["InputArc","AD",["Filter","D"]],
["OutputArc","AD",["Move",true]],
["InputArc","AF",["Filter","F"]],
["OutputArc","AF",["Move",true]],
["InputArc","AAA",["Filter_empty"]],
["OutputArc","BBB",["Regular"]],
["Place"],
["OutputArc","AAA",["Regular"]],
["Extension",["Release"]],
["Place"],
["OutputArc","AAA",["Regular"]],
["Extension",["Release"]],
["Place"],
["InputArc","BBB",["Regular"]],
["OutputArc","CCC",["Regular"]],
["Place"],
["InputArc","BBB",["Regular"]],
["Extension",["Grab","DFDFFF"]],
["Place"],
["InputArc","CCC",["Split"]],
["OutputArc","CCC",["Regular"]],
["Extension",["Init_with_token"]]]
#+END_SRC

**** Modèle 1
     
*** Bacterie
    Une bacterie contient des molécules. Pour chaque molecule, on 
    connait le nombre présent, et on simule une unique forme protéinée 
    pour toutes les molécules du même type.
****** Note : on pourrait imaginer d'autres formes d'interprétation :
      + fonction (par ex log) du nombre de mols
       + ou autre.

      La simulation est alors découpée en (pour l'instant) deux étapes :
       + Simulation des protéines
       + Résolution des catch/bind

**** Simulation des protéines

   La protéine associée à chaque molécule lance un certain nombre
   de transitions de son réseau de pétri. Pour choisir ce nombre,
   on pourrait :
    + le faire correspondre au nombre de mol présentes
    (ou une fonction de celui-ci
    + Prendre le pgcd de tous les nombres de molécules
    (ou même diviser par le plus petit et arrondir)
    pour que le coût de simulation ne dépende pas du 
    nombre de molécules).

**** Résolution des catch/bind

     On calcule combien de bind sont effectués.

     Pour le déroulé du bind en lui même, on peut aussi avoir
     plusieurs choix :
       + Le bind crée un token
       + Le bind peut seulement se dérouler si un token vide
       se trouve sur la place avec le catcher
       + Si un token occupé par une molécule se trouve sur la
       place, la molécule est remplacée, ou alors une des deux 
       au hasard.


****** Note : du coup pour le simulateur
       On calcule les catch/bind, puis
       on attribue à chaque molécule un certain
       nb de transitions. On peut alors soit
       observer les transitions de chaque molécule,
       soit tout exécuter, etc.

*** Le monde

    Quelques idées : 
 + les bactéries peuvent se duppliquer sans restriction physique.
   À chaque nouvelle bactérie créée on attribue une certaines
   distribution des différentes ressources (acides aminés ?)
 + Matrice (tridimensionnelle), avec des « commandes » pour 
   interagir avec les cellules voisines, se déplacer,
   communiquer, etc..
 + Hôtes pour simuler un comportement multicellulaire : 
   l'hôte a différents emplacements pour cellules, où 
   se trouvent  des recepteurs particuliers, qui permettent
   à l'hôte d'effectuer des actions dans un autre monde physique.
 + Graphe (lazy ?) ou les nœuds contiennent pour chaque arc une 
   interface permettant de simuler une membrane. On peut imaginer
   différentes interfaces, avec différents niveaux de « difficulté ».

*** Énergie
    Les tokens peuvent être un bon moyen de gérer les échanges 
    énergétiques. Le mieux serait sans-doute de faire comme en vrai, 
    c'est à dire qu'établir un liaison coûte de l'énergie, qui est 
    libérée lorsque la liaison est rompue. Ça implique de modifier un 
    peu le condition de grab et de catch/bind, mais ça devrait se faire 
    pas trop difficilement.
    On peut aussi penser à faire des transferts d'énergie entre une 
    protéine et la molécule grabée.
*** Dans un futur lointain

    Pour que les bactéries puissent avoir un comportement efficace, il 
    faudrait qu'il y ait de l'information ambiante, qui représente 
    plusieurs aspects du monde alentour, que les bactéries puissent 
    mesurer

    Implémenter un système similaire à tierra, où les bactéries qui 
    font des actions « interdites » reçoivent un malus, et finissent
    par mourir ?
    (par exemple : problème de transition, problème lors du décalage
    d'une molécule à l'intérieur d'

