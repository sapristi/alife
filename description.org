* Setting up
  
** Stuff to install 

Using opam, install 
 + batteries
 + ppx_deriving.show 
 + ppx_deriving.yojson

Also requires OCaml, python3 with python3-graphviz and python3-tk

** Usefull stuff
 Installed with opam :
 + merlin (completion and errors detection in emacs)
 + utop (advanced top-level)

Source files are commented using the outshine emacs mode

* Tasks
** Plein de trucs

* Intro

Du coup, on veut ici créer un programme qui réalise le rêve de la vie artificielle :
héberger et simuler des cellules qui vont évoluer afin de recréer la vie /in silico/ (on peut toujours rêver).


** Résumé des épisodes précédents

Il y a eu plusieurs essais dans ce sens : 
 - Tierra : 
    + Le monde est un tableau unidimensionnel. Chaque case est soit vide, soit contient une instruction, parmi un jeu d'instruction bien choisi. 
    + Les cellules sont un ensemble contigu de cases, et donc des instructions qu'elles contiennent.
      Le jeu d'instruction permet aux cellules de lire n'importe où, mais pas d'écrire à l'intérieur d'autres cellules. Les cellules se dupliquent en recopiant leur code génétique vers une partie vide de la bande.
    + Chaque cellule a son processeur propre, qui simule l'exécution de son code.
    + Comportements apparus : spécialisation, parasitage, un peu de complexification
 -l Des trucs d'Hutton : 
    + Le monde est un tableau bidimensionnel. Le monde contient des atomes, qui peuvent se déplacer plus ou moins librement.
    + Les atomes ont un type donné, et un état qui peut varier au cours du temps. Un jeu de réactions chimique, qui détermine si deux atomes de type et d'état donné qui se rencontrent vont former une liaison. Jeu de réactions chimiques bien choisi.
    + Les cellules ont une membrane qui forme un cercle, et un brin d'ADN, relié à ses deux extrémités à la membrane. Les cellules se dupliquent de manière spontanée grâce aux réactions chimiques. 
    + Le monde est simulé /physiquement/, c'est à dire chaque atome séparemment, et rien d'autre.
    + Comportements apparus : pas grand chose, à part une légère réduction de l'ADN.



En résumé, Tierra s'est montré prometteur, mais est beaucoup plus proche d'un ordinateur que d'une cellule. On manque en particulier de capacité de réaction, de communication, etc...
Hutton est très proche en quelques sorte de la biologie, mais ça ne marche pas très bien. Sans parler des coûts de simulation faramineux, ni du jeu de réactions chimiques tellement alambiqué pour que ça marche que c'en est un peu absurde. 


** Où l'on essaie de préparer un autre épisode

Ce que j'aimerait faire, c'est un modèle qui soit à la fois proche du fonctionnement des ordinateurs (c'est à dire en particulier avec une physique très simple, sans avoir besoin de simuler des choses à un niveau très bas), et qui reflète le principe de fonctionnement d'une cellule autant qu'il est souhaitable et possible.


Une première idée à été de faire un peu comme Tierra, mais en plus de dimensions. Une cellule est une matrice, où les fonctions sont des instructions qui pointent vers la suivante (contiguë). En trois dimensions, ça peut commencer à donner des trucs assez rigolos, mais gérer la duplication semble devenir complexe. On perds aussi la bonne relation qui existait entre les cellules et l'univers.
 

La deuxième idée est d'utiliser des modèles complutationnels simples pour simuler les protéines. Partant des automates, j'en suis arrivé aux réseaux de Petri, qui me semblent assez prometteurs. On le décrira plus précisement par la suite.


** Trucs importants à garder en tête

Les membranes, c'est la vie en plus tranquille.
La communication, c'est la vie en plus rigolo.
La vie tout court, c'est déjà pas mal.
Les ribosomes, c'est trop l'éclate.

* Description de ce que j'essaie de faire

** But

   Le but est d'avoir un modèle unifié de molécules, qui permettent à la fois d'avoir des molécules qui :
 - représentent de l'information (ADN)
 - puissent agir sur d'autres molécules (protéines, enzymes), et plus précisement 
   + Découper une molécule
   + Insérer une molécule dans une autre
   + Lire de l'information écrite sur une molécule
 - puissent échanger de l'information (métabolites)
 

** Mise en œuvre
  
   Le modèle proposé est d'avoir tout d'abord des molécules sous forme de liste d'acides (aminés), chaque acide contenant soit de l'information, soit un morceau qui permette de reconstituer les fonctionnement de la molécule : on veut la *replier* pour obtenir une protéine. Une fois repliée, on aurait un truc qui ressemble fort à un réseau de Petri (plutôt un peu étendu).
   
   
   Un des trucs cool, c'est qu'on peut faire des *ribosomes* ! Et donc permettre à la duplication elle même d'évoluer.
   
*** Modèle pour les molécules
    
    Une molécule est donc formée par une liste d'acide, dont le role va être de
    + former des place du réseau de Pétri, 
    + contribuer à former des transitions du réseau
    + contenir de l'information
      
    Après une opération de repli, on pourra attribuer à une molécule sa forme protéinée, un réseau de pétri (graphe biparti). Il y a plusieurs moyens d'organiser une molécule et la façon dont elle se replie, on va donc détailler et justifier un peu le processus.
    
    
**** Différentes idées 
     
     Tous les acides de la molécule forment une place, et se retrouvent donc au même niveau. Des places particulières contiennent un arc entrant ou un arc sortant. Plusieurs inconvénients : 
 - Ça limite fortement les fonctionnalités d'une protéine
 - Un seul arc entrant ou sortant par place
  
   
 Du coup, il faut pouvoir ajouter des attributs à une place. Ou pourrait faire ça de manière interne, mais on précisera dans la partie suivante pourquoi on choisira ici une mméthode externe.

**** Modèle retenu
     
     On fonctionnera de manière modulaire, avec les types d'acide suivants :
 + place : correspond à une place du réseau de pétri. On pourra fournir un attribut interne pour effectuer certaines actions
 + transition_input/output : ajoute un arc sortant/entrant  
 + extension : ajoute un attribut à la place précédente dans la molécule. Quelques types d'extension : 
   - information : un morceau d'information
   - autre ? action ?
     
 Les avantages sont les suivants : 
 + facile à étendre
 + du point de vue des mutations possibles, on a facilement des changements de fonctionnalité
  

Un *GROS PROBLÈME:
que se passe-t-il si plusieurs transtions input avec la même id partent d'un même nœud, en particulier pour la gestion des token ?
Plusieurs pistes :
 - la transition n'est pas crée
 - seul un des arcs est pris en compte
 - utiliser un des arcs au hasard
 - le programme bug

**** Détails d'implémentation

On part donc d'une molécule = liste d'acides.
 1. On parcourt la molécule pour en extraire :
    - d'une part la liste des nœuds, en associant à chaque nœud la liste des extensions qui le suivent
    - d'autre part tous 


***** Questions

Est-ce qu'on définit un unique type extension (qui contient les transitions) ou on sépare les transitions ?
À priori c'est pas mal de séparer puisque :
 + les transitions font partie de la structure du réseau de pétri, au contraire des autres extensions
 + ça permet de construire le réseau sans avoir à connaitre l'implémentation particulière des types

 
** Processus de reflexion sur comment faire avancer le schmilblick en cours


*** Dans le fichier molecule.ml




On crée un type acid (aminé), qui est :
 + soit un Node Comme on le vera dans la partie suivante, un noeud doit pouvoir recevoir des messages et attraper des molécules.
 + soit un InputLink (s,d) où s représente la transition vers laquelle l'arc pointe, et d va permettre de construire la fonction de transion. 
   Le noeud associé est le noeud précédent dans la liste d'acides qui représente la molécule.
 + soit un OutputLink (s,d) ** à compléter ** 

Une molécule est donc une liste d'acides aminés.

On définit un foncteur, qui, pour des types de Node, d'InputLink et d'OutputLink donnés, permet de replier une molécule en générant les transitions qui vont bien. Les transitions générées sont du type

#+BEGIN_SRC ocaml
type transition = 
    string * 
       (int * inputLinkType ) array * 
       (int * outputLinkType) array
#+END_SRC 

Il faut donc recréer la fonction de transition derrière, et peut-être se débarasser des inputLinkType et outputLinkType (ce qui est normal vu qu'on ne les connait pas).


Le type du foncteur en entier est :

#+BEGIN_SRC ocaml
module type MOLECULE_TYPES = 
sig 
  type nodeType
  type inputLinkType
  type outputLinkType
end;;


module MolFolcding :
  functor (MolTypes : MOLECULE_TYPES) ->
    sig
      type acid =
          Node of MolTypes.nodeType
        | InputLink of string * MolTypes.inputLinkType
        | OutputLink of string * MolTypes.outputLinkType
      type molecule = acid list
      type transition_with_lists =
          string * (int * MolTypes.inputLinkType) list *
          (int * MolTypes.outputLinkType) list
      type transition =
          string * (int * MolTypes.inputLinkType) array *
          (int * MolTypes.outputLinkType) array
      val buildTransitions : molecule -> transition list
      val buildNodesList : molecule -> MolTypes.nodeType list
    end
#+END_SRC 

où 

*** Dans le fichier proteine.ml

On simule l'avancement d'un réseau de Petri.


Le réseau de Petri est étendu de manière à pouvoir générer les comportements suivants :
 + Attraper / relacher une molécule
 + Découper une molécule
 + Coller ensemble deux molécules
 + Parcourir une molécule, pour :
   + lire les données qu'elle contient
   + se placer au bon endroit pour la découper
 + Envoyer des messages
 + Recevoir des messages (qui vont modifier le comportement)
 + (Transmettre de l'information)


L'idée est de pouvoir associer une molécule M1 (et un emplacement de cette molécule) à un jeton (placé sur une autre molécule M2).
Une transition de M2 pourra alors découper cette molécule M1 à l'emplacement spécifié. Il faudra alors que deux arcs sortant associent une molécule à leur jeton pour garder les deux parties coupées M1' et M1''. Au contraire, si deux arcs entrants ont des jetons qui contiennent une molécule, on pourra les recoller ensemble.

On peut aussi essayer de faire la même chose avec des morceaux d'information associées aux jetons, je ne sais pas si c'est vraiment utile.


Pour attraper une molécule ou recevoir un message, l'idée serait d'avoir une propriété sur les noeuds qui leur permettent de créer un jeton en attrapant une molécule ou en recevant un message.


Une autre propriété associée aux jetons serait une énergie, mais je ne sais pas encore bien quel rôle lui attribuer. En fait si, il faudrait que recoller deux molécules entre elles demande de l'énergie, et que les séparer en libère.


Pour l'instant, l'énergie sert à rien, et on la gère un peu n'importe comment. En fait on va la virer, ce sera un peu plus propre.

Par contre, il faudrait peut-être arriver à mettre un ordre un peu plus déterminé sur la façon dont les arcs des transitions se combinent.


*** Dans un futur lointain

Pour que les bactéries puissent avoir un comportement efficace, il faudrait qu'il y ait de l'information ambiante, qui représente plusieurs aspects du monde alentour, que les bactéries puissent mesurer.





* Stuff to do


** v0.0.0
*** DONE ajouter des arcs entre tous les nœuds dans le client ?
*** DONE Clarifier les dénominations, en particulier input et output links
*** DONE Bugs quand le client demande une transition et que ce n'est pas possible


** v0.0.1
*** DONE reconstruire les types d'acides
*** TODO définir et utiliser une convention de nommage qui sépare clairement les noms de types/noms de variables/noms de modules
*** TODO documenter et implémenter ce qui découle de la nouvelle implémentation des acides
   
