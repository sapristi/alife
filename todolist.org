* Todo

*** Create "gradient" of conditions: in order to generate more interesting features,
    create gradient of conditions.  We an use the environment to achieve this for now
    (although this could apply to other properties). 
    - have multiple "cells"
    - molecules can move from one cell to the other ones
      * Implementation: Choose beween:
        - implementing molecule move as a reaction -> would prevent parallel execution in the cells
        - degrading the reaction, e.g. running it at a fixed interval (allow to parallelize)
      * We have to implement the logic anyway, probably  based on something like osmosis barrier
        Also possible to do things like filter based on mol length -> not at start
*** grafana export to django :nice_to_have:
*** bacterie random state initialization:
     - store in django
     - button to generate random state seed

*** TODO Rename environment fields :nice_to_have:
     - use factor instead of rate
*** Improve observability :nice_to_have:
    - [ ] add name to bactery
    - [ ] use reference to bactery instead of env in reac_mgr
*** Add UI helpers for snaphots :idea:
*** Parse mol from url in UI :idea:
*** Denser full repr - we only need to store tokens :idea:


* Done

*** DONE capture logs when running experimens
   - [X] add custom log config - probably use a dedicated table to store them
   - [X] take care not to explode memory
     - output logs to stderr (without capturing stderr) ? or custom handling in python
   - [X] store logs ?
   - [ ] Log viewing: https://github.com/aurc/loggo ?

*** CANCELED Instead of overriding equality checks, have uid generator per bactery :idea:
     -> would compromise interaction between bacteries

*** DONE possible collision of equality operator used in tests with other stuff :problem:
    - should be ok for now
*** DONE Comparison (from ppx.ord) used for reac sets - without taking reac rate into account :problem:
    - [X] Switch to equal operator for set comparison (with custom Set module)
    - [X] Improve doc of implem, especially about circular references
    - [X] Ensure that equality checks do not miss anything - e.g. reactions associated with
*** DONE Bug after loading a snapshot: problems with missing reactions or something :bug:
*** DONE Fix json import / export
  - [X] Check if switching to https://github.com/janestreet/ppx_yojson_conv is worth it
    -> probably not right now, as ppx_deriving is still maintained
  - [X] Add way to setup reactions when creating bactery from json

* Old TODO

** bugfixes/improvements
*** TODO Collision: not selecting from all possible couples
*** TODO collision reaction -> reversing molecules ?
*** TODO "endless_duplication", reaction 3307 => exception "not found"
   - because of reverse
   - reverse seems like intended behaviour, but state is not updated
*** TODO seems like triggering transition bugs when mol release
*** DONE Debug pnet grab
   between 
   ribosome :  AAABAAAADDFCBAAADDFBAAABDDFCBAABDDFBAAACDDFCBAACDDFBAAADDDFCBAADDDFBAAAFDDFCBAAFDDFBAAAAADDFCAABBBDDFAAABAAAADDFABAFAFDDFAAABAAABDDFABAFBFDDFAAABAAACDDFABAFCFDDFAAABAAADDDFABAFDFDDFAAABAAAFDDFABAFFFDDFAAABCAAADDFCCAAADDFBCBABDDFCCAABDDFBCCACDDFCCAACDDFBCDADDDFCCAADDDFBCFAFDDFCCAAFDDFBABAAADDFCAABBBDDFAAACAAAAADDFABBAAACAAAAADDFABBAAABAABBBDDFCAACCCDDFAAABAABBBDDFABADFDFFFDDFAAABBACCCDDFCAACCCDDFABC 
   that should grab any mol starting with DD and
   DDBBAFDDCCCAACFDDCCCABBAAAFDDFFFDFDABAFDDBBBAABAAAFDDCCCAACFDDBBBAABAAABBAFDDAAAAACAAABBAFDDAAAAACAAAFDDBBBAACFDDAAABABFDDFAACCFDDFAFCBFDDDAACCFDDDADCBFDDCAACCFDDCACCBFDDBAACCFDDBABCBFDDAAACCFDDAAACBAAAFDDFFFABAFDDFAAABAAAFDDFDFABAFDDDAAABAAAFDDFCFABAFDDCAAABAAAFDDFBFABAFDDBAAABAAAFDDFAFABAFDDAAAABAAAFDDBBBAACFDDAAAAABFDDFAABCFDDFAAABFDDDAABCFDDDAAABFDDCAABCFDDCAAABFDDBAABCFDDBAAABFDDAAABCFDDAAAABAAA 
   (reversed ribosome)
*** DONE Fix removing empty reactants
        - ok for imol, this needs testing for amols
*** TODO Rework pnet creation, introduce variants (cyclic pnet)? 
*** TODO Config generator
*** TODO explicit exceptions
*** TODO gui:
    - [ ] update all molecules after transition (if needs be)
    - [ ] modify ambient 
    - [ ] clear button
    - [X] examples load
    - [X] error with refresh when pnet is removed
    - [X] commit env fails
    - [X] refresh after loading
    - [X] display reactions
*** STARTED Numeric module, that provides a swith to select 
   numeric implementation.
   Only mol quantities are still integers;
   Random need some rework, and performance might be an issue
   with exact calculations
*** DONE stacktrace
*** DONE Pnet creation : negative place_id in transitions
*** DONE reactions not removed when removing molecule
*** DONE break reaction 
   - seems ok with imol, but not with amol
*** DONE repair missing execute actions
*** DONE fix remove/change mol quantity from interface
*** DONE display ambiant mols
*** DONE sandbox pnet id
   - when requesting pnet_from_mol, pnet_id is sometimes missing
   - when deleting pnet, id is not provided
     -> en standby jusqu'à avoir une interface bien définie.
*** DONE links to other pages in web interface
*** DONE fix environment in gui
*** DONE reporter service
   - [X] log folder
   - [ ] better logs
   - [X] use logs as a backend for reporter
   - [X] cli reporter works
*** DONE revert amolset to a simpler state
   we will modify ARMgr to be a wrapper over 
   PnetSet.t Map, and same thing with IRMgr

   Pour rendre les choses propres, toute action 
   qui modifie un état interne renvoie la liste
   des actions à effectuer à plus haut niveau

*** DONE petri net display inconsistencies
   the first time display works, but the next ones fail
   -> the problem was with cytoscape : empty_filter was not rcognised 
   and caused a bug

*** DONE change « send to bact » to « send to sandbox » 
   in the molbuilder tab, and change behaviour accordingly

*** DONE reactions initialisation seems broken :
   grabs happen between the same pnet (same id), and are added six times !
   -> problem solved, there was an error whan adding reactions to IRMap

** improvements
*** TODO Reorganise/rename reaction files so that they are easily accessible
*** TODO Use custom (binary?) trees to hold reactions in Reac_sets so as to speed up next reaction search.
*** TODO use Pnet Set as reactants
*** TODO use uniqueID lib
*** DONE collisions
*** STARTED sanitize the use mutable/immutable and refs in structures
    - reactants do not use ref anymore

*** STARTED implement tests
   describe bacteria where only one kind of reaction can happen to
   be able to predict results

*** DONE use Zarith module for reaction rates
    -> find a way to restrict fractions to decimal ones
    so as to avoid too much cost
    -> functorize to compare performance
*** DONE sanitize server files :
   - use dune to copy files to the build directory
   - put external libs in an archive to clean git repo
*** DONE split the web client in multiple pages

*** DONE global reaction coefficient (in environment) : 
   The idea is to put these parameters in an environment module,
   that could be subject to dynamic changes. This would also allow 
   changes set by user input.
   There still lies the tradeoff between having reactions use this
   coefficient directly, or using it later in reac_mgr.
   A better abstraction in reac_mgr would allow to avoid too much boilerplate.

   - [X] feature
   - [X] interface to modify coefficients dynamically
     (is it possible ?)
   - [X] web interface

*** DONE switch to a rest API for the webserver

*** DONE mol quantity go under 0
   -> problem with references
** features
  
*** STARTED random collisions
   - [X] Implement reaction in framework
   - [ ] Implement reaction effects :
     * the two molecules break
     * the two molecules mix 
     * grab by a place not designed to do so
     * release some grabed molecules 
     * ...
       -> the important point is to implement a minimal set of features
       and enable evolution.
   - [ ] Test reactions

*** TODO Random single mol effects
   - launch a transition that is not launchable
   - release a grabed molecule

*** TODO extended pnets (as graphs)

** optional

*** TODO simple reactions to test against

** org mode cheat sheet

*** checklist :
 - [X] switch with C-c C-c
 - [ ]  

*** STATES

**** TODO
**** STARTED
**** CURRENT
**** DONE 
**** CANCELED



(setq org-todo-keywords
      '((sequence "TODO" "STARTED" "CURRENT"  "|" "DONE" "CANCELED")))


(setq org-todo-keyword-faces
      '(("TODO" . "yellow")
        ("STARTED" . "orange")
        ("CURRENT" .  (:foreground "red" :weight bold))
        ("DONE"    .  "lime green")
        ("CANCELED" .  "deep blue sky")))
** temp

 + Duplicator FDFDFF
   * original: 
     AAABAAAADDBABAFAFDDBAAABAAABDDBABAFBFDDBAAABAAACDDBABAFCFDDBAAABAAADDDBABAFDFDDBAAABAAAFDDBABAFFFDDBAAABAAAADDBCBAAADDBBAAABDDBCBAABDDBBAAACDDBCBAACDDBBAAADDDBCBAADDDBBAAAFDDBCBAAFDDBBAAAAADDBCAABBBDDBAAABCAAADDBCCAAADDBBCBABDDBCCAABDDBBCCACDDBCCAACDDBBCDADDDBCCAADDDBBCFAFDDBCCAAFDDBBABAAADDBCAABBBDDBAAACAAAAADDBABBAAACAAAAADDBABBAAABAABBBDDBCAACCCDDBAAABAABBBDDBABAFDFDFFDDBAAABBACCCDDBCAACCCDDBABC
   * reverted + DD: 
     DDCBABDDCCCAACBDDCCCABBAAABDDFFDFDFABABDDBBBAABAAABDDCCCAACBDDBBBAABAAABBABDDAAAAACAAABBABDDAAAAACAAABDDBBBAACBDDAAABABBDDFAACCBDDFAFCBBDDDAACCBDDDADCBBDDCAACCBDDCACCBBDDBAACCBDDBABCBBDDAAACCBDDAAACBAAABDDBBBAACBDDAAAAABBDDFAABCBDDFAAABBDDDAABCBDDDAAABBDDCAABCBDDCAAABBDDBAABCBDDBAAABBDDAAABCBDDAAAABAAABDDFFFABABDDFAAABAAABDDFDFABABDDDAAABAAABDDFCFABABDDCAAABAAABDDFBFABABDDBAAABAAABDDFAFABABDDAAAABAAA
 + Reverter imparfait FDFDFF
   * original:
     AAAABAFDFDFFDDBBAAADDBAAAABCBAAADDBCAACADDBAAABAAABDDBCBAADDBCCAABDDBBABACDDBAAACAAACDDBBBABADDBCAABBADDBAAACAABADDBBAABBDDBBAABBCDDBAAABAABBADDBCCBBADDBBABCADDBAAACAABBDDBBAABBCDDBCBABBCDDBBAACADDBAAACAACADDBABB
   * reverted + DD: 
     DDBBABDDACAACAAABDDACAABBDDCBBABCBDDCBBAABBDDBBAACAAABDDACBABBDDABBCCBDDABBAABAAABDDCBBAABBDDBBAABBDDABAACAAABDDABBAACBDDABABBBDDCAAACAAABDDCABABBDDBAACCBDDAABCBDDBAAABAAABDDACAACBDDAAABCBAAAABDDAAABBDDFFDFDFABAAAA
 + Reverter parfait FDFFF
   * original!
     AAAABAFDFDFFDDBBAAADDBAAAABCBAAADDBCAACADDBAAABAAABDDBCBAADDBCCAABDDBBABACDDBAAACAAACDDBBBABADDBCAABBADDBAAACAABADDBBAABBDDBBAABBCDDBBACCADDBAAABAABBADDBCCBBADDBBABCADDBAAACAABBDDBBAABBCDDBCBABBCDDBBAACADDBAAACAACADDBABB
   * reverted + DD:
     DDABDDACAACAAABDDACAABBDDCBBABCBDDCBBAABBDDBBAACAAABDDACBABBDDABBCCBDDABBAABAAABDDACCABBDDCBBAABBDDBBAABBDDABAACAAABDDABBAACBDDABABBBDDCAAACAAABDDCABABBDDBAACCBDDAABCBDDBAAABAAABDDACAACBDDAAABCBAAAABDDAAABBDDFFDFDFABAAAA
